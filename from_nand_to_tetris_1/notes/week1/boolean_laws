
******************* Boolean laws *************************

1)Commutative laws ---> 
			(x And y) = (y And x)
			(x Or y) = (y Or x)

2)Associative laws --->

			(x And (y And z)) = ((x And y) And z)
			(x Or (y Or z)) = ((x Or y) Or z)

3)Distributive laws --->

			x And (y Or z) = (x And y ) Or (X And z)
			x Or (Y And z) = (x Or y) And (X Or z)






### Problem : Evaluate common expression of the following truth table



x	y	z	f
0	0	0	1	(Not(x) And Not(y) And Not(z))
0	0	1	1	(Not(x) And Not(y) And z)
0	1	0	1	(Not(x) And y And Not(z))
0	1	1	0	
1	0	0	1	(x And Not(y) And Not(z))
1	0	1	0
1	1	0	0
1	1	1	0










###Theorem

Any Boolean function can be represented using an expression 
containing And and Not operations.



##De Morgans theorem

	(x Or y) = Not(Not(x) And Not(y))


## There is one logic gate which can be used to contruct all the logic gates and that is NAND


x	y	Nand
0	0	1	Not(x) And Not(y)
0	1	1	Not(x) And y
1	0	1	x And Not(y)
1	1	0	


Proof:
	=>	(Not(x) And Not(y)) Or (Not(x) And y) Or (x And Not(y))
	=>	Not(x)[Not(y) Or y] Or (x And Not(y))

		NOTE:- x And Not(x) => 1
	
	=>	Not(x) Or (x And Not(y))

		NOTE:- x Or (y And z) = (x Or y) And (x Or z)

	=>	(Not(x) Or x) And (Not(x) Or Not(y))

	=>	Not(x) Or Not(y) => Not(x And y) (We will always try to break down the complex expression to simle expression)


lets verify our expression


x	y	f(Not(x) Or Not(y))
0	0	1
0	1	1
1	0	1
1	1	0


Hence Proved


therefore x Nand y => Not(x) Or Not(y) => Not(x And y)
